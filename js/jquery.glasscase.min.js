/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */
; if (!(typeof Blob === "function" || typeof Blob === "object") || typeof URL === "undefined") { if ((typeof Blob === "function" || typeof Blob === "object") && typeof webkitURL !== "undefined") { self.URL = webkitURL } else { var Blob = (function (a) { var b = a.BlobBuilder || a.WebKitBlobBuilder || a.MozBlobBuilder || a.MSBlobBuilder || (function (o) { var f = function (x) { return Object.prototype.toString.call(x).match(/^\[object\s(.*)\]$/)[1] }, w = function l() { this.data = [] }, v = function h(z, x, y) { this.data = z; this.size = z.length; this.type = x; this.encoding = y }, p = w.prototype, u = v.prototype, r = o.FileReaderSync, d = function (x) { this.code = this[this.name = x] }, q = ("NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR").split(" "), t = q.length, k = o.URL || o.webkitURL || o, s = k.createObjectURL, e = k.revokeObjectURL, j = k, n = o.btoa, i = o.atob, g = o.ArrayBuffer, m = o.Uint8Array; v.fake = u.fake = true; while (t--) { d.prototype[q[t]] = t + 1 } if (!k.createObjectURL) { j = o.URL = {} } j.createObjectURL = function (y) { var z = y.type, x; if (z === null) { z = "application/octet-stream" } if (y instanceof v) { x = "data:" + z; if (y.encoding === "base64") { return x + ";base64," + y.data } else { if (y.encoding === "URI") { return x + "," + decodeURIComponent(y.data) } } if (n) { return x + ";base64," + n(y.data) } else { return x + "," + encodeURIComponent(y.data) } } else { if (s) { return s.call(k, y) } } }; j.revokeObjectURL = function (x) { if (x.substring(0, 5) !== "data:" && e) { e.call(k, x) } }; p.append = function (B) { var D = this.data; if (m && (B instanceof g || B instanceof m)) { var C = "", y = new m(B), z = 0, A = y.length; for (; z < A; z++) { C += String.fromCharCode(y[z]) } D.push(C) } else { if (f(B) === "Blob" || f(B) === "File") { if (r) { var x = new r; D.push(x.readAsBinaryString(B)) } else { throw new d("NOT_READABLE_ERR") } } else { if (B instanceof v) { if (B.encoding === "base64" && i) { D.push(i(B.data)) } else { if (B.encoding === "URI") { D.push(decodeURIComponent(B.data)) } else { if (B.encoding === "raw") { D.push(B.data) } } } } else { if (typeof B !== "string") { B += "" } D.push(unescape(encodeURIComponent(B))) } } } }; p.getBlob = function (x) { if (!arguments.length) { x = null } return new v(this.data.join(""), x, "raw") }; p.toString = function () { return "[object BlobBuilder]" }; u.slice = function (A, x, z) { var y = arguments.length; if (y < 3) { z = null } return new v(this.data.slice(A, y > 1 ? x : this.data.length), z, this.encoding) }; u.toString = function () { return "[object Blob]" }; return w } (a)); return function c(g, f) { var j = f ? (f.type || "") : ""; var e = new b(); if (g) { for (var h = 0, d = g.length; h < d; h++) { e.append(g[h]) } } return e.getBlob(j) } } (typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content || this)) } }
/*! @source http://purl.eligrey.com/github/canvas-toBlob.js/blob/master/canvas-toBlob.js */
(function (a) { var b = a.Uint8Array, d = a.HTMLCanvasElement, c = d && d.prototype, e = /\s*;\s*base64\s*(?:;|$)/i, f = "toDataURL", h, g = function (p) { var q = p.length, m = new b(q / 4 * 3 | 0), o = 0, s = 0, t = [0, 0], j = 0, r = 0, n, k, l; while (q--) { k = p.charCodeAt(o++); n = h[k - 43]; if (n !== 255 && n !== l) { t[1] = t[0]; t[0] = k; r = (r << 6) | n; j++; if (j === 4) { m[s++] = r >>> 16; if (t[1] !== 61) { m[s++] = r >>> 8 } if (t[0] !== 61) { m[s++] = r } j = 0 } } } return m }; if (b) { h = new b([62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, 0, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]) } if (d && !c.toBlob) { c.toBlob = function (p, n) { if (!n) { n = "image/png" } if (this.mozGetAsFile) { p(this.mozGetAsFile("canvas", n)); return } var m = Array.prototype.slice.call(arguments, 1), k = this[f].apply(this, m), j = k.indexOf(","), o = k.substring(j + 1), i = e.test(k.substring(0, j)), l; if (Blob.fake) { l = new Blob; if (i) { l.encoding = "base64" } else { l.encoding = "URI" } l.data = o; l.size = o.length } else { if (b) { if (i) { l = new Blob([g(o)], { type: n }) } else { l = new Blob([decodeURIComponent(o)], { type: n }) } } } p(l) }; if (c.toDataURLHD) { c.toBlobHD = function () { f = "toDataURLHD"; var i = this.toBlob(); f = "toDataURL"; return i } } else { c.toBlobHD = c.toBlob } } } (typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content || this));
/*! FileSaver.js
*  A saveAs() FileSaver implementation.
*  2014-01-24
*
*  By Eli Grey, http://eligrey.com
*  License: X11/MIT
*    See LICENSE.md
*/
;
/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
; var saveAs = saveAs || (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator)) || (function (h) { if (typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) { return } var r = h.document, l = function () { return h.URL || h.webkitURL || h }, e = h.URL || h.webkitURL || h, n = r.createElementNS("http://www.w3.org/1999/xhtml", "a"), g = !h.externalHost && "download" in n, j = function (t) { var s = r.createEvent("MouseEvents"); s.initMouseEvent("click", true, false, h, 0, 0, 0, 0, 0, false, false, false, false, 0, null); t.dispatchEvent(s) }, o = h.webkitRequestFileSystem, p = h.requestFileSystem || o || h.mozRequestFileSystem, m = function (s) { (h.setImmediate || h.setTimeout)(function () { throw s }, 0) }, c = "application/octet-stream", k = 0, b = [], i = function () { var t = b.length; while (t--) { var s = b[t]; if (typeof s === "string") { e.revokeObjectURL(s) } else { s.remove() } } b.length = 0 }, q = function (t, s, w) { s = [].concat(s); var v = s.length; while (v--) { var x = t["on" + s[v]]; if (typeof x === "function") { try { x.call(t, w || t) } catch (u) { m(u) } } } }, f = function (t, v) { var w = this, C = t.type, F = false, y, x, s = function () { var G = l().createObjectURL(t); b.push(G); return G }, B = function () { q(w, "writestart progress write writeend".split(" ")) }, E = function () { if (F || !y) { y = s(t) } if (x) { x.location.href = y } else { window.open(y, "_blank") } w.readyState = w.DONE; B() }, A = function (G) { return function () { if (w.readyState !== w.DONE) { return G.apply(this, arguments) } } }, z = { create: true, exclusive: false }, D; w.readyState = w.INIT; if (!v) { v = "download" } if (g) { y = s(t); r = h.document; n = r.createElementNS("http://www.w3.org/1999/xhtml", "a"); n.href = y; n.download = v; var u = r.createEvent("MouseEvents"); u.initMouseEvent("click", true, false, h, 0, 0, 0, 0, 0, false, false, false, false, 0, null); n.dispatchEvent(u); w.readyState = w.DONE; B(); return } if (h.chrome && C && C !== c) { D = t.slice || t.webkitSlice; t = D.call(t, 0, t.size, c); F = true } if (o && v !== "download") { v += ".download" } if (C === c || o) { x = h } if (!p) { E(); return } k += t.size; p(h.TEMPORARY, k, A(function (G) { G.root.getDirectory("saved", z, A(function (H) { var I = function () { H.getFile(v, z, A(function (J) { J.createWriter(A(function (K) { K.onwriteend = function (L) { x.location.href = J.toURL(); b.push(J); w.readyState = w.DONE; q(w, "writeend", L) }; K.onerror = function () { var L = K.error; if (L.code !== L.ABORT_ERR) { E() } }; "writestart progress write abort".split(" ").forEach(function (L) { K["on" + L] = w["on" + L] }); K.write(t); w.abort = function () { K.abort(); w.readyState = w.DONE }; w.readyState = w.WRITING }), E) }), E) }; H.getFile(v, { create: false }, A(function (J) { J.remove(); I() }), A(function (J) { if (J.code === J.NOT_FOUND_ERR) { I() } else { E() } })) }), E) }), E) }, d = f.prototype, a = function (s, t) { return new f(s, t) }; d.abort = function () { var s = this; s.readyState = s.DONE; q(s, "abort") }; d.readyState = d.INIT = 0; d.WRITING = 1; d.DONE = 2; d.error = d.onwritestart = d.onprogress = d.onwrite = d.onabort = d.onerror = d.onwriteend = null; h.addEventListener("unload", i, false); a.unload = function () { i(); h.removeEventListener("unload", i, false) }; return a } (typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content)); if (typeof module !== "undefined") { module.exports = saveAs } (function (d, c, a, f) { var e = c.Modernizr; function b(i, h) { var g = this; g.element = i.wrap("<div class='glass-case'></div>").parent(); g.init(h) } b.defaults = { widthDisplay: 400, heightDisplay: 534, isAutoScaleDisplay: "true", isAutoScaleHeight: "true", isDownloadEnabled: "true", downloadPosition: 3, nrThumbsPerRow: 5, isThumbsOneRow: "true", thumbsPosition: "bottom", firstThumbSelected: 0, isOneThumbShown: "false", colorActiveThumb: -1, zoomPosition: "right", isZoomEnabled: "true", isOverlayEnabled: "true", speed: 400, easing: "linear", isKeypressEnabled: "true", colorIcons: -1 }; b.prototype = { init: function (j) { var i = this; i.config = d.extend(true, {}, b.defaults, j); i._options = j; i.supportCanvas = e.canvas; var g = "<div class='gc-display-area'><div class='gc-icon gc-icon-download'></div><div class='gc-icon gc-icon-next'></div><div class='gc-icon gc-icon-prev'></div><div class='gc-display-container'><div class='gc-lens gc-hide'></div><img class='gc-display-display' alt='Display Image' /></div></div>"; var k = "<div class='gc-zoom gc-hide'><div class='gc-zoom-container'><img alt='Zoomed Image' /></div></div>"; var h = "<div class='gc-overlay-area gc-hide'><div class='gc-icon gc-icon-close'></div><div class='gc-icon gc-icon-next'></div><div class='gc-icon gc-icon-prev'></div><div class='gc-overlay-container'><img class='gc-overlay-display' alt='Overlay Image' /></div></div>"; var l = "<div class='gc-thumbs-area-prev'><div class='gc-icon gc-icon-prev'></div></div><div class='gc-thumbs-area-next'><div class='gc-icon gc-icon-next'></div></div>"; if (i.config.thumbsPosition == "top") { i.element.append(g) } else { i.element.prepend(g) } i.element.prepend(k); i.element.prepend(h); i.gcLoader = d("<div class='gc-loading'></div>"); i.gcLoading = i.element.find(".gc-loading"); i.gcImgNaturalSizes = []; i.gcDisplayArea = i.element.find(".gc-display-area"); i.gcDisplayContainer = i.gcDisplayArea.find(".gc-display-container"); i.gcDisplayDisplay = i.gcDisplayContainer.find(".gc-display-display"); i.gcLens = i.gcDisplayContainer.find(".gc-lens"); i.gcDisplayDownload = i.gcDisplayArea.find(".gc-icon-download"); i.gcDisplayPrevious = i.gcDisplayArea.find(".gc-icon-prev"); i.gcDisplayNext = i.gcDisplayArea.find(".gc-icon-next"); i.gcZoom = i.element.find(".gc-zoom"); i.gcZoomContainer = i.gcZoom.find(".gc-zoom-container"); i.gcZoomDisplay = i.gcZoomContainer.find("img"); i.gcOverlayArea = i.element.find(".gc-overlay-area"); i.gcOverlayContainer = i.gcOverlayArea.find(".gc-overlay-container"); i.gcOverlayDisplay = i.gcOverlayContainer.find(".gc-overlay-display"); i.gcOverlayPrevious = i.gcOverlayArea.find(".gc-icon-prev"); i.gcOverlayNext = i.gcOverlayArea.find(".gc-icon-next"); i.gcOverlayClose = i.gcOverlayArea.find(".gc-icon-close"); i.gcThumbsUl = i.element.find("ul"); i.gcThumbsUl.wrap("<div class='gc-thumbs-area'></div>"); i.gcThumbsArea = i.element.find(".gc-thumbs-area"); i.gcThumbsArea.append(l); i.gcThumbsAreaPrevious = i.gcThumbsArea.find(".gc-thumbs-area-prev"); i.gcThumbsPrevious = i.gcThumbsAreaPrevious.find(".gc-icon-prev"); i.gcThumbsAreaNext = i.gcThumbsArea.find(".gc-thumbs-area-next"); i.gcThumbsNext = i.gcThumbsAreaNext.find(".gc-icon-next"); i.gcThumbsLi = i.gcThumbsUl.find("li"); i.gcThumbsImg = i.gcThumbsLi.find("img"); i.gcThumbsImg.wrap('<div class="gc-li-display-container"></div>'); i.gcThumbsLiDiv = i.gcThumbsLi.find(".gc-li-display-container"); i.gcTotalThumbsImg = i.gcThumbsImg.length; i.gcThumbsUl.removeClass("gc-start"); if (i.config.colorIcons != -1) { i.element.find(".gc-icon").css("color", i.config.colorIcons) } if (i.config.isDownloadEnabled == "false" || i.supportCanvas == false) { i.gcDisplayDownload.addClass("gc-hide") } else { var m = { top: "", bottom: "", right: "", left: "" }; switch (i.config.downloadPosition) { case 1: m.top = 0; m.left = 0; break; case 2: m.top = 0; m.right = 0; break; case 4: m.bottom = 0; m.right = 0; break; default: m.bottom = 0; m.left = 0; break } i.gcDisplayDownload.css(m) } if (isNaN(i.config.firstThumbSelected) == false && parseFloat(i.config.firstThumbSelected) > -1 && parseFloat(i.config.firstThumbSelected) <= (i.gcThumbsLi.length - 1)) { i.current = i.config.firstThumbSelected } else { i.current = i.config.firstThumbSelected } i.currentSlide = Math.floor(i.current / i.config.nrThumbsPerRow); i.old = 0; i.currentMousePos = { x: -1, y: -1 }; i.gcDisplayDisplay.attr("src", i.gcThumbsImg.eq(i.current).attr("src")); i.setup(); d.when(i.preloadImages()).done(function () { i.update(); i.initEvents() }) }, preloadImages: function () { var h = this; var i = 0, j = h.gcTotalThumbsImg; function g(l, k) { this.width = l; this.height = k } return d.Deferred(function (k) { h.gcThumbsImg.each(function (l) { d("<img/>").on("load", function () { var n = this.width, p = this.height, o = new g(n, p), m = h.gcThumbsLi.find("img[src*='" + d(this).attr("src") + "']").parents("li").index(); h.gcImgNaturalSizes[m] = o; h.setupThumbImg(h.gcThumbsLi.eq(m), m); h.removeLoader(h.gcThumbsLi.eq(m)); h.gcThumbsLi.eq(m).find(".gc-li-display-container").removeClass("gc-hide"); if (h.current == m) { h.removeLoader(h.gcDisplayArea); h.gcDisplayContainer.removeClass("gc-hide"); h.setupDisplayDisplay(); h.setupLens() } if (++i === j) { k.resolve() } }).attr("src", d(this).attr("src")) }) }).promise() }, setup: function () { var g = this; g.setupDisplayArea(); if (g.config.isOneThumbShown == "false" && g.gcTotalThumbsImg == 1) { g.gcThumbsArea.addClass("gc-hide"); g.config.isKeypressEnabled = "false" } else { g.config.isOneThumbShown = "true"; g.setupThumbs() } if (g.gcTotalThumbsImg == 1) { g.gcOverlayPrevious.addClass("gc-hide"); g.gcOverlayNext.addClass("gc-hide") } else { g.gcOverlayPrevious.css("margin-top", -(g.gcOverlayPrevious.outerHeight() / 2)); g.gcOverlayNext.css("margin-top", -(g.gcOverlayNext.outerHeight() / 2)) } g.element.css({ width: g.gcDisplayArea.outerWidth(), height: g.gcThumbsArea.outerHeight(true) + g.gcDisplayArea.outerHeight(true) }) }, setupDisplayArea: function () { var j = this; var i, m, l, h, k = j.config.widthDisplay, g = j.config.heightDisplay; j.gcDisplayArea.css({ height: "0", width: "0" }); if (j.config.isAutoScaleDisplay == "true") { if (j.config.isAutoScaleHeight == "true") { l = j.config.widthDisplay; h = l * (g / k) } else { h = j.config.heightDisplay; l = h * (k / g) } j.gcDisplayArea.css({ height: h, width: l }) } else { i = j.gcDisplayArea.outerWidth(), m = j.gcDisplayArea.outerHeight(); if (j.config.isAutoScaleHeight == "true") { l = i; h = l * (g / k); j.gcDisplayArea.css("height", h) } else { h = m; l = h * (k / g); j.gcDisplayArea.css("width", l) } } j.gcDisplayPrevious.css("margin-top", -(j.gcDisplayPrevious.outerHeight() / 2)); j.gcDisplayNext.css("margin-top", -(j.gcDisplayNext.outerHeight() / 2)); if (j.gcTotalThumbsImg == 1) { j.gcDisplayPrevious.addClass("gc-hide"); j.gcDisplayNext.addClass("gc-hide") } j.gcDisplayContainer.addClass("gc-hide"); j.addLoader(j.gcDisplayArea) }, setupDisplayDisplay: function () { var j = this; j.gcDisplayContainer.css({ width: "0", height: "0" }); j.gcDisplayContainer.css({ width: j.gcDisplayArea.outerWidth(), height: j.gcDisplayArea.outerHeight() }); var n = j.gcDisplayContainer.outerWidth() / j.gcImgNaturalSizes[j.current].width, l = j.gcDisplayContainer.outerHeight() / j.gcImgNaturalSizes[j.current].height, k, o, h; if (n < 1 || l < 1) { if (j.config.isZoomEnabled == "true") { j.gcDisplayContainer.on("mousemove.glasscase", d.proxy(j.mousemoveHandler, j)); j.gcDisplayContainer.on("mouseenter.glasscase", d.proxy(j.mouseenterHandler, j)); j.gcDisplayContainer.on("mouseleave.glasscase", d.proxy(j.mouseleaveHandler, j)) } else { j.gcDisplayContainer.off("mousemove.glasscase", d.proxy(j.mousemoveHandler, j)); j.gcDisplayContainer.off("mouseenter.glasscase", d.proxy(j.mouseenterHandler, j)); j.gcDisplayContainer.off("mouseleave.glasscase", d.proxy(j.mouseleaveHandler, j)) } if (n < l) { k = n } else { k = l } o = k * j.gcImgNaturalSizes[j.current].width; h = k * j.gcImgNaturalSizes[j.current].height } else { j.gcDisplayContainer.trigger("mouseleave.glasscase"); j.gcDisplayContainer.off("mousemove.glasscase", d.proxy(j.mousemoveHandler, j)); j.gcDisplayContainer.off("mouseenter.glasscase", d.proxy(j.mouseenterHandler, j)); j.gcDisplayContainer.off("mouseleave.glasscase", d.proxy(j.mouseleaveHandler, j)); o = j.gcImgNaturalSizes[j.current].width; h = j.gcImgNaturalSizes[j.current].height } j.gcDisplayDisplay.css({ width: o, height: h }); j.gcDisplayContainer.css({ width: o, height: h }); var p = parseFloat(j.gcDisplayArea.css("border-left-width")) * 2, i = parseFloat(j.gcDisplayArea.css("padding-top")) * 2; var m = ((j.gcDisplayContainer.outerWidth() / 2) * 100) / (j.gcDisplayArea.outerWidth() - p - i), g = ((j.gcDisplayContainer.outerHeight() / 2) * 100) / (j.gcDisplayArea.outerWidth() - p - i); j.gcDisplayContainer.css({ "margin-left": "-" + m + "%", "margin-top": "-" + g + "%" }) }, setupZoom: function () { var h = this; h.gcZoomDisplay.attr("src", h.gcDisplayDisplay.attr("src")); var g = parseFloat(h.gcZoom.css("border-left-width")) * 2, j = parseFloat(h.gcDisplayArea.css("padding-top")) * 2, i = h.gcDisplayContainer.outerHeight() + g + j; h.gcZoomContainer.css({ width: 0, height: 0 }); h.gcZoom.css({ width: i, height: i }); h.gcZoomContainer.css({ width: h.gcZoom.outerWidth(), height: h.gcZoom.outerHeight() }) }, setupZoomPos: function () { var g = this; if (g.config.zoomPosition == "left") { g.gcZoom.css({ right: (g.element.outerWidth(true)), "margin-right": "3px" }) } else { g.gcZoom.css({ left: (g.element.outerWidth(true)), "margin-left": "3px" }) } g.gcZoom.css("top", g.gcDisplayContainer.position().top + parseFloat(g.gcDisplayContainer.css("margin-top")) - parseFloat(g.gcDisplayArea.css("padding-top"))); if (g.config.thumbsPosition == "top") { g.gcZoom.css({ top: parseFloat(g.gcZoom.css("top")) + g.gcThumbsArea.outerHeight(), "margin-top": "3px" }) } }, setupLens: function () { var g = this; var h = Math.round(g.gcZoomContainer.outerWidth() / g.gcImgNaturalSizes[g.current].width * 100); var i = Math.round(g.gcDisplayDisplay.outerWidth() * h / 100); g.gcLens.css({ width: (i), height: (i) }); g.mousemoveHandler() }, addLoader: function (h) { var g = this; d(h).prepend(g.gcLoader.clone()) }, removeLoader: function (i) { var h = this; var g = d(i).find(".gc-loading"); if (g.length) { g.remove() } }, setupThumbImg: function (k, n) { var l = this; var m = l.gcThumbsLi.outerWidth(), o = l.gcThumbsLi.outerHeight(), i; var h = d(k); var q = m / l.gcImgNaturalSizes[n].width; var j = o / l.gcImgNaturalSizes[n].height; i = q > j ? q : j; l.gcThumbsImg[n].width = Math.ceil(l.gcImgNaturalSizes[n].width * i, 10); l.gcThumbsImg[n].height = Math.ceil(l.gcImgNaturalSizes[n].height * i, 10); var p = ((l.gcThumbsImg.eq(n).outerWidth() / 2) * 100) / (l.gcThumbsLiDiv.outerWidth()), g = ((l.gcThumbsImg.eq(n).outerHeight() / 2) * 100) / (l.gcThumbsLiDiv.outerWidth()); l.gcThumbsImg.eq(n).css({ "margin-top": "-" + g + "%", "margin-left": "-" + p + "%" }); l.gcThumbsLiDiv.eq(n).removeClass("gc-hide"); l.removeLoader(l.gcThumbsLi.eq(n)); l.gcThumbsLiDiv.eq(n).removeClass("gc-hide"); l.removeLoader(l.gcThumbsLi.eq(n)) }, setupThumbs: function () { var g = this; g.gcThumbsArea.css("width", g.gcDisplayArea.outerWidth()); var h = parseFloat(g.gcThumbsLi.css("margin-right")), m = g.config.widthDisplay / g.config.heightDisplay, l = (g.gcThumbsArea.outerWidth() / g.config.nrThumbsPerRow - (g.config.nrThumbsPerRow - 1) * h / g.config.nrThumbsPerRow), o = l / m; var n; if (g.config.isThumbsOneRow == "true") { n = (l * 100) / (((l + h) * g.gcThumbsLi.length) - h) } else { n = (l * 100) / g.gcThumbsArea.outerWidth() } g.gcThumbsLi.css({ width: n + "%", height: o }); g.gcThumbsLiDiv.addClass("gc-hide"); for (var k = 0; k < g.gcThumbsLi.length; k++) { g.addLoader(g.gcThumbsLi[k]) } if (g.config.isThumbsOneRow == "true") { g.gcThumbsLi.last().css("margin-right", 0) } else { g.gcThumbsUl.find(":nth-child(" + g.config.nrThumbsPerRow + "n)").css("margin-right", 0); g.gcThumbsUl.find(":nth-child(n +" + (parseFloat(g.config.nrThumbsPerRow) + 1) + ")").css("margin-top", "3px") } if (g.config.isThumbsOneRow == "true") { g.gcThumbsUl.css({ width: Math.ceil((l * g.gcThumbsLi.length + (g.gcThumbsLi.length - 1) * h)), height: Math.ceil(o) }) } else { var j = Math.ceil((g.gcThumbsLi.length - 1) / g.config.nrThumbsPerRow); g.gcThumbsUl.css({ width: g.gcThumbsArea.outerWidth(), height: Math.ceil(o * j + h * (j - 1)) }) } g.gcThumbsArea.css("height", Math.ceil(g.gcThumbsUl.outerHeight())); if (g.config.thumbsPosition == "bottom") { g.gcDisplayArea.css("top", "0"); g.gcThumbsArea.css("margin-top", "3px") } if (g.config.thumbsPosition == "top") { g.gcThumbsArea.css("top", "0"); g.gcDisplayArea.css("margin-top", "3px") } if (g.config.isThumbsOneRow == "true") { g.gcThumbsAreaPrevious.removeClass("gc-hide"); g.gcThumbsPrevious.css("margin-top", (-g.gcThumbsPrevious.outerHeight() / 2)); g.gcThumbsAreaNext.removeClass("gc-hide"); g.gcThumbsNext.css("margin-top", (-g.gcThumbsNext.outerHeight() / 2)); if (parseFloat(g.gcThumbsPrevious.css("left")) < 1) { g.gcThumbsPrevious.css("left", "1px") } if (parseFloat(g.gcThumbsNext.css("right")) < 1) { g.gcThumbsNext.css("right", "1px") } g.setupSlider() } else { g.gcThumbsAreaPrevious.addClass("gc-hide"); g.gcThumbsAreaNext.addClass("gc-hide") } }, setupSlider: function () { var g = this; if (g.gcTotalThumbsImg <= g.config.nrThumbsPerRow) { g.gcThumbsAreaPrevious.addClass("gc-hide"); g.gcThumbsAreaNext.addClass("gc-hide"); return } g.gcThumbsAreaPrevious.removeClass("gc-disabled"); g.gcThumbsAreaNext.removeClass("gc-disabled"); if (g.currentSlide == 0) { g.gcThumbsAreaPrevious.addClass("gc-disabled") } if (g.currentSlide == Math.floor((g.gcThumbsLi.length - 1) / g.config.nrThumbsPerRow)) { g.gcThumbsAreaNext.addClass("gc-disabled") } }, update: function () { var g = this; if (g.config.colorActiveThumb != -1) { g.element.find(".gc-active").css("background-color", "") } g.gcThumbsLi.removeClass("gc-active").eq(g.current).addClass("gc-active"); if (g.config.colorActiveThumb != -1) { g.element.find(".gc-active").css("background-color", g.config.colorActiveThumb) } g.gcDisplayDisplay.attr("src", g.gcThumbsLi.eq(g.current).find("img").attr("src")); g.setupDisplayDisplay(); g.setupZoom(); g.setupLens(); g.setupZoomPos(); if (!g.gcOverlayArea.hasClass("gc-hide")) { g.gcOverlayDisplay.attr("src", g.gcDisplayDisplay.attr("src")).attr("width", g.gcImgNaturalSizes[g.current].width).attr("height", g.gcImgNaturalSizes[g.current].height).css({ "margin-left": -(g.gcOverlayDisplay.width() / 2), "margin-top": -(g.gcOverlayDisplay.height() / 2) }) } }, animateImage: function () { var g = this; g.isAnimating = true; g.gcDisplayDisplay.animate({ opacity: 0.5 }, 200, function () { if (!g.gcOverlayArea.hasClass("gc-hide")) { g.gcOverlayDisplay.animate({ opacity: 0 }, 200, function () { g.update(); g.setupOverlay(); g.gcOverlayDisplay.animate({ opacity: 1 }, 500) }) } if (g.gcOverlayArea.hasClass("gc-hide")) { g.update() } g.gcDisplayDisplay.animate({ opacity: 1 }, 500, function () { g.gcZoomDisplay.attr("src", g.gcDisplayDisplay.attr("src")) }); g.isAnimating = false }) }, nextImage: function () { var g = this; if (g.isAnimating) { return false } g.old = g.current; g.current = (g.current == (g.gcThumbsLi.length - 1)) ? 0 : g.current + 1; g.slide("true", ""); g.animateImage() }, previousImage: function () { var g = this; if (g.isAnimating) { return false } g.old = g.current; g.current = (g.current == 0) ? (g.gcThumbsLi.length - 1) : g.current - 1; g.slide("true", ""); g.animateImage() }, slide: function (j, i) { var g = this; if (g.config.isThumbsOneRow == "false") { return } var l = 0; if (j == "true") { l = Math.floor(g.current / g.config.nrThumbsPerRow) } else { if (i == "previous") { l = 0; if (g.currentSlide > 0) { l = g.currentSlide - 1 } } else { l = Math.floor((g.gcThumbsLi.length - 1) / g.config.nrThumbsPerRow); if (g.currentSlide < l) { l = g.currentSlide + 1 } } } if (l == g.currentSlide) { return } var k = g.gcThumbsArea.outerWidth() + parseFloat(g.gcThumbsLi.css("margin-right")); g.currentSlide = l; g.gcThumbsUl.animate({ left: (-(l * k)) + "px" }, 400); var h = d.proxy(function () { this.isAnimating = false; this.setupSlider() }, g); h.call() }, mousemoveHandler: function (g) { var i = this; if (g !== f) { i.currentMousePos.x = g.pageX; i.currentMousePos.y = g.pageY } if (i.currentMousePos.x == -1 && i.currentMousePos.y == -1) { return } var m = i.gcDisplayContainer.offset(); var q = i.currentMousePos.x - m.left, h = i.currentMousePos.y - m.top; var l = i.gcDisplayDisplay.outerWidth(), t = i.gcDisplayDisplay.outerHeight(); var k = i.gcLens.outerWidth(), p = i.gcLens.outerHeight(), s = h - Math.round(p / 2), o = q - Math.round(k / 2); var n = i.gcZoomDisplay.outerWidth() / l, r = -s * n, j = -o * n; if (h - p / 2 < 0) { s = 0; r = 0 } if (h + p / 2 > 0 + t) { s = t - p; r = -(i.gcZoomDisplay.outerHeight() - i.gcZoom.outerHeight()) } if (q - k / 2 < 0) { o = 0; j = 0 } if (q + k / 2 > 0 + l) { o = l - k; j = -(i.gcZoomDisplay.outerWidth() - i.gcZoom.outerWidth()) } i.gcLens.css({ top: s, left: o }); i.gcZoomDisplay.css({ top: r, left: j }) }, mouseenterHandler: function (h) { var g = this; g.gcZoom.fadeIn(200, function () { g.gcLens.removeClass("gc-hide"); g.gcZoom.removeClass("gc-hide") }) }, mouseleaveHandler: function (h) { var g = this; g.gcLens.addClass("gc-hide"); g.gcZoom.fadeOut(200, function () { g.gcLens.addClass("gc-hide"); g.gcZoom.addClass("gc-hide") }) }, setupOverlay: function () { var g = this; g.gcOverlayDisplay.attr("src", g.gcDisplayDisplay.attr("src")).css({ width: g.gcImgNaturalSizes[g.current].width, height: g.gcImgNaturalSizes[g.current].height }); if (g.gcOverlayContainer.outerHeight() < g.gcImgNaturalSizes[g.current].height) { g.gcOverlayDisplay.css("margin-top", -(g.gcOverlayContainer.outerHeight() / 2)) } else { g.gcOverlayDisplay.css("margin-top", -(g.gcImgNaturalSizes[g.current].height / 2)) } if (g.gcOverlayContainer.outerWidth() < g.gcImgNaturalSizes[g.current].width) { g.gcOverlayDisplay.css("margin-left", -(g.gcOverlayContainer.outerWidth() / 2)) } else { g.gcOverlayDisplay.css("margin-left", -(g.gcImgNaturalSizes[g.current].width / 2)) } }, initEvents: function () { var g = this; g.gcDisplayContainer.on("click.glasscase", function (h) { if (g.config.isOverlayEnabled == "false") { return } g.gcOverlayArea.removeClass("gc-hide"); g.setupOverlay(); d("body").addClass("gc-noscroll") }); if (g.config.isZoomEnabled == "true") { g.gcDisplayContainer.on("mousemove.glasscase", d.proxy(g.mousemoveHandler, g)); g.gcDisplayContainer.on("mouseenter.glasscase", d.proxy(g.mouseenterHandler, g)); g.gcDisplayContainer.on("mouseleave.glasscase", d.proxy(g.mouseleaveHandler, g)) } g.gcDisplayDownload.on("click.glasscase", function (k) { var i = a.createElement("canvas"); i.width = g.gcImgNaturalSizes[g.current].width; i.height = g.gcImgNaturalSizes[g.current].height; var j = i.getContext("2d"); j.drawImage(g.gcDisplayDisplay[0], 0, 0); var h = new Blob(); i.toBlob(function (l) { saveAs(l, g.gcDisplayDisplay.attr("src").replace(/^.*[\\\/]/, "")) }, "image/png") }); g.gcDisplayPrevious.on("click.glasscase", function (h) { g.previousImage() }); g.gcDisplayNext.on("click.glasscase", function (h) { g.nextImage() }); g.gcOverlayPrevious.on("click.glasscase", function (h) { g.previousImage() }); g.gcOverlayNext.on("click.glasscase", function (h) { g.nextImage() }); g.gcOverlayClose.on("click.glasscase", function (h) { d("body").removeClass("gc-noscroll"); g.gcOverlayArea.addClass("gc-hide") }); d(a).on("keydown", function (h) { if (g.config.isKeypressEnabled == "true") { if (h.keyCode == 37) { g.previousImage() } if (h.keyCode == 39) { g.nextImage() } } if (h.keyCode == 27) { d("body").removeClass("gc-noscroll"); g.gcOverlayArea.addClass("gc-hide") } }); g.gcThumbsLi.on("click.glasscase", function (i) { if (g.isAnimating) { return false } g.isAnimating = true; var h = d(this).index(); if (g.current != h) { g.old = g.current; g.current = h; g.animateImage() } }); g.gcThumbsAreaPrevious.on("click.glasscase", function (h) { g.slide("false", "previous") }); g.gcThumbsAreaNext.on("click.glasscase", function (h) { g.slide("false", "next") }) } }; d.fn.glassCase = function (g) { this.each(function () { var h = d.data(this, "gcglasscase"); if (!h) { d.data(this, "gcglasscase", new b(d(this), g)) } }) } })(jQuery, window, document);